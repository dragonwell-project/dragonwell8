#
# Copyright (c) 2022 Alibaba Group Holding Limited. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation. Alibaba designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#

name: Dragonwell_8_build_test

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  prerequisites:
    name: Prerequisites
    runs-on: "ubuntu-20.04"
    outputs:
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
    steps:
      - name: Determine unique bundle identifier
        id: check_bundle_id
        run: echo "::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}"

  linux_x64_build:
    needs: prerequisites
    name: Linux x64
    runs-on: "ubuntu-20.04"
    container:
      image: docker.io/dragonwelljdk/build_jdk:8u
    steps:
      - name: Checkout target source
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Compile debug
        run: |
          sh configure --with-debug-level=fastdebug --with-cacerts-file=${PWD}/common/security/cacerts --with-milestone=fcs --enable-unlimited-crypto
          make images CONF=linux-x86_64-normal-server-fastdebug
      - name: Compile release
        run: |
          make clean || true
          [ -d build ] && rm -rf build
          sh configure --with-debug-level=release --with-cacerts-file=${PWD}/common/security/cacerts --with-milestone=fcs --enable-unlimited-crypto
          make images CONF=linux-x86_64-normal-server-release
      - name: Upload Test image
        uses: actions/upload-artifact@v2
        with:
          name: dragonwell8_release_image_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            build/linux-x86_64-normal-server-release/images/j2sdk-image

  linux_x64_test:
    name: Linux x64 Test
    needs:
      - prerequisites
      - linux_x64_build

    runs-on: "ubuntu-20.04"
    container:
      image: docker.io/dragonwelljdk/build_jdk:8u
    strategy:
      fail-fast: false
      matrix:
        test:
          - jdk/test/:jdk_tier1
          - jdk/test/:dragonwell_jdk_features
          - hotspot/test/:hotspot_tier1
          - hotspot/test/:hotspot_jwarmup
          - hotspot/test/:hotspot_elastic_heap
          - hotspot/test/:hotspot_multi_tenant
    steps:
      - name: Checkout target source
        uses: actions/checkout@v3
        with:
<<<<<<< HEAD
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Download image
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: dragonwell8_release_image_${{ needs.prerequisites.outputs.bundle_id }}
          path: /opt/dragonwell8
        continue-on-error: false
      - name: Test image version
        run: |
          ls /opt/dragonwell8
          chmod -R 777 /opt/dragonwell8
          /opt/dragonwell8/bin/java -version
      - name: Test
=======
          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x86${{ matrix.artifact }}
        continue-on-error: true

      - name: Restore build artifacts (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x86${{ matrix.artifact }}
        if: steps.build_restore.outcome == 'failure'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk

      - name: Unpack jdk
        run: |
          mkdir -p "${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}"
          tar -xf "${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}.tar.gz" -C "${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}"

      - name: Unpack tests
        run: |
          mkdir -p "${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact }}"
          tar -xf "${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact }}.tar.gz" -C "${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact }}"

      - name: Find root of jdk image dir
        run: |
          imageroot=`find ${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }} -name release -type f`
          echo "imageroot=`dirname ${imageroot}`" >> $GITHUB_ENV

      - name: Run tests
        run: >
          JDK_IMAGE_DIR=${{ env.imageroot }}
          TEST_IMAGE_DIR=${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact }}
          BOOT_JDK=${BOOT_JDK}
          JT_HOME=${HOME}/jtreg
          make run-test-prebuilt
          CONF_NAME=run-test-prebuilt
          LOG_CMDLINES=true
          JTREG_VERBOSE=fail,error,time
          TEST="${{ matrix.suites }}"
          TEST_OPTS_JAVA_OPTIONS=
          JTREG_KEYWORDS="!headful"
          JTREG="JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash"

      - name: Check that all tests executed successfully
        if: always()
        run: >
          if ! grep --include=test-summary.txt -lqr build/*/test-results -e "TEST SUCCESS" ; then
            cat build/*/test-results/*/text/newfailures.txt ;
            exit 1 ;
          fi

      - name: Create suitable test log artifact name
        if: always()
        run: echo "logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`" >> $GITHUB_ENV

      - name: Package test results
        if: always()
        working-directory: build/run-test-prebuilt/test-results/
        run: >
          zip -r9
          "$HOME/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip"
          .
        continue-on-error: true

      - name: Package test support
        if: always()
        working-directory: build/run-test-prebuilt/test-support/
        run: >
          zip -r9
          "$HOME/linux-x86${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip"
          .
          -i *.jtr
          -i */hs_err*.log
          -i */replay*.log
        continue-on-error: true

      - name: Persist test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: ~/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip
        continue-on-error: true

      - name: Persist test outputs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: ~/linux-x86${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip
        continue-on-error: true

  windows_x64_build:
    name: Windows x64
    runs-on: "windows-2019"
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}"
      VS2017_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_FILENAME }}"
      VS2017_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_URL }}"
      VS2017_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_SHA256 }}"

    steps:
      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v2
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          New-Item -Force -ItemType directory -Path "$HOME\cygwin"
          & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"
          Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

      - name: Checkout the source
        uses: actions/checkout@v2
        with:
          path: jdk

      - name: Checkout the FreeType source
        uses: actions/checkout@v2
        with:
          repository: "freetype/freetype"
          ref: VER-2-8-1
          path: freetype

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
          & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash.Hash -eq $env:BOOT_JDK_SHA256
          & tar -xf "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -C "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
          Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore Visual Studio 2017 from cache
        id: vs2017
        uses: actions/cache@v2
        with:
          path: ~/${{ env.VS2017_FILENAME }}
          key: vs2017

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Uninstall WinSDKs
        run: >
          Start-Process -FilePath 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe' -Wait -NoNewWindow -ArgumentList
          'modify --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          --remove Microsoft.VisualStudio.Component.Windows10SDK.18362
          --remove Microsoft.VisualStudio.Component.Windows10SDK.19041
          --remove Microsoft.VisualStudio.Component.Windows10SDK.20348
          --remove Microsoft.VisualStudio.Component.Windows10SDK.22000
          --quiet'

      - name: Download Visual Studio 2017
        run: |
          curl -L "$env:VS2017_URL" -o "$HOME/$env:VS2017_FILENAME"
        if: steps.vs2017.outputs.cache-hit != 'true'

      - name: Install Visual Studio 2017
        run: >
          Start-Process -FilePath "$HOME\$env:VS2017_FILENAME" -Wait -NoNewWindow -ArgumentList
          'install --productId Microsoft.VisualStudio.Product.Community --channelId VisualStudio.15.Release
          --add Microsoft.VisualStudio.Workload.NativeDesktop
          --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          --add Microsoft.VisualStudio.Component.Windows10SDK.17763
          --quiet --wait'

      - name: Fix OpenJDK permissions
        run: bash -c "chmod -R 0777 jdk"

      - name: Copy FreeType project file
        run: >
          Remove-Item "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;
          Copy-Item -Path "$env:GITHUB_WORKSPACE\jdk\.github\workflows\freetype.vcxproj"
          -Destination "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;

      - name: Configure
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION" ;
          $env:FREETYPE_HOME = "$env:GITHUB_WORKSPACE\freetype" ;
          $env:JT_HOME = cygpath "$HOME/jtreg" ;
          & bash configure
          --with-toolchain-version=2017
          --with-conf-name=windows-x64
          ${{ matrix.flags }}
          --with-user-release-suffix="$env:GITHUB_ACTOR-$env:GITHUB_SHA"
          --with-build-number=b00
          --with-boot-jdk="$env:BOOT_JDK"
          --with-freetype-src="$env:FREETYPE_HOME"
          --with-jtreg="$env:JT_HOME" ;
          bash -c "cat $(find -name config.log)"
        working-directory: jdk

      - name: Build
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          & make CONF_NAME=windows-x64 FORCE_MSC_VER=1912 FORCE_LD_VER=1412 images
        working-directory: jdk

      - name: Persist test bundles
        uses: actions/upload-artifact@v2
        with:
          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk/build/windows-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}.zip
            jdk/build/windows-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz
            jdk/build/windows-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz

  windows_x86_build:
    name: Windows x86
    runs-on: "windows-2019"
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x86 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_SHA256 }}"
      VS2010_DIR: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_DIR }}"
      VS2010_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_FILENAME }}"
      VS2010_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_URL }}"
      VS2010_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_SHA256 }}"

    steps:
      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v2
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          New-Item -Force -ItemType directory -Path "$HOME\cygwin"
          & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"
          Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

      - name: Checkout the source
        uses: actions/checkout@v2
        with:
          path: jdk

      - name: Checkout the FreeType source
        uses: actions/checkout@v2
        with:
          repository: "freetype/freetype"
          ref: VER-2-8-1
          path: freetype

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
          & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash.Hash -eq $env:BOOT_JDK_SHA256
          & tar -xf "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -C "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
          Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore Visual Studio 2010 from cache
        id: vs2010
        uses: actions/cache@v2
        with:
          path: ~/${{ env.VS2010_DIR }}
          key: vs2010

      - name: Download and unpack Visual Studio 2010
        run: |
          mkdir "$HOME\$env:VS2010_DIR"
          & curl -L "$env:VS2010_URL" -o "$HOME/$env:VS2010_FILENAME"
          $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/$env:VS2010_FILENAME"
          $FileHash.Hash -eq $env:VS2010_SHA256
          & 7z x -o"$HOME/$env:VS2010_DIR" "$HOME/$env:VS2010_FILENAME"
          & dir "$HOME/$env:VS2010_DIR"
        if: steps.vs2010.outputs.cache-hit != 'true'

      - name: Install VS2010Express
        run: |
          Start-Process -FilePath "$HOME\$env:VS2010_DIR\VCExpress\setup.exe" -ArgumentList "/q /norestart" -Wait -NoNewWindow

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Fix OpenJDK permissions
        run: bash -c "chmod -R 0777 jdk"

      - name: Copy FreeType project file
        run: >
          Remove-Item "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;
          Copy-Item -Path "$env:GITHUB_WORKSPACE\jdk\.github\workflows\freetype.vcxproj"
          -Destination "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;

      - name: Configure
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION" ;
          $env:FREETYPE_HOME = "$env:GITHUB_WORKSPACE\freetype" ;
          $env:JT_HOME = cygpath "$HOME/jtreg" ;
          & bash configure
          --with-conf-name=windows-x86
          --with-toolchain-version=2010
          --with-msvcr-dll='C:\Windows\SysWOW64\msvcr100.dll'
          --with-target-bits=32
          ${{ matrix.flags }}
          --with-user-release-suffix="$env:GITHUB_ACTOR-$env:GITHUB_SHA"
          --with-build-number=b00
          --with-boot-jdk="$env:BOOT_JDK"
          --with-freetype-src="$env:FREETYPE_HOME"
          --with-jtreg="$env:JT_HOME" ;
          bash -c "cat $(find -name config.log)"
        working-directory: jdk

      - name: Build
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          & make CONF_NAME=windows-x86 images
        working-directory: jdk

      - name: Persist test bundles
        uses: actions/upload-artifact@v2
        with:
          name: transient_jdk-windows-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk/build/windows-x86/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{ matrix.artifact }}.zip
            jdk/build/windows-x86/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin-tests${{ matrix.artifact }}.tar.gz
            jdk/build/windows-x86/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{ matrix.artifact }}-symbols.tar.gz

  windows_x64_test:
    name: Windows x64
    runs-on: "windows-2019"
    if: false
    needs:
      - prerequisites
      - windows_x64_build

    strategy:
      fail-fast: false
      matrix:
        test:
          - jdk/tier1 part 1
          - jdk/tier1 part 2
          - jdk/tier1 part 3
          - langtools/tier1
          - hs/tier1 common
          - hs/tier1 compiler
          - hs/tier1 gc
          - hs/tier1 runtime
          - hs/tier1 serviceability
        include:
          - test: jdk/tier1 part 1
            suites: test/jdk/:tier1_part1
          - test: jdk/tier1 part 2
            suites: test/jdk/:tier1_part2
          - test: jdk/tier1 part 3
            suites: test/jdk/:tier1_part3
          - test: langtools/tier1
            suites: test/langtools/:tier1
          - test: hs/tier1 common
            suites: test/hotspot/jtreg/:tier1_common
            artifact: -debug
          - test: hs/tier1 compiler
            suites: test/hotspot/jtreg/:tier1_compiler
            artifact: -debug
          - test: hs/tier1 gc
            suites: test/hotspot/jtreg/:tier1_gc
            artifact: -debug
          - test: hs/tier1 runtime
            suites: test/hotspot/jtreg/:tier1_runtime
            artifact: -debug
          - test: hs/tier1 serviceability
            suites: test/hotspot/jtreg/:tier1_serviceability
            artifact: -debug

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}"

    steps:
      - name: Checkout the source
        uses: actions/checkout@v2

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
          & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash.Hash -eq $env:BOOT_JDK_SHA256
          & tar -xf "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -C "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
          Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v2
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          New-Item -Force -ItemType directory -Path "$HOME\cygwin"
          & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"
          Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Restore build artifacts
        id: build_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-windows-x64${{ matrix.artifact }}
        continue-on-error: true

      - name: Restore build artifacts (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-windows-x64${{ matrix.artifact }}
        if: steps.build_restore.outcome == 'failure'

      - name: Unpack jdk
        run: |
          mkdir -p "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}"
          tar -xf "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}.zip" -C "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}"

      - name: Unpack symbols
        run: |
          mkdir -p "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols"
          tar -xf "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz" -C "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }}-symbols"

      - name: Unpack tests
        run: |
          mkdir -p "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}"
          tar -xf "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz" -C "${HOME}/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}"

      - name: Find root of jdk image dir
        run: echo ("imageroot=" + (Get-ChildItem -Path $HOME/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact }} -Filter release -Recurse -ErrorAction SilentlyContinue -Force).DirectoryName) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Run tests
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          $env:JDK_IMAGE_DIR = cygpath "${{ env.imageroot }}" ;
          $env:SYMBOLS_IMAGE_DIR = cygpath "${{ env.imageroot }}" ;
          $env:TEST_IMAGE_DIR = cygpath "$HOME/jdk-windows-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact }}" ;
          $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION" ;
          $env:JT_HOME = cygpath "$HOME/jtreg" ;
          & make run-test-prebuilt
          CONF_NAME=run-test-prebuilt
          LOG_CMDLINES=true
          JTREG_VERBOSE=fail,error,time
          TEST=${{ matrix.suites }}
          TEST_OPTS_JAVA_OPTIONS=
          JTREG_KEYWORDS="!headful"
          JTREG="JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash"

      - name: Check that all tests executed successfully
        if: always()
        run: >
          if ((Get-ChildItem -Path build\*\test-results\test-summary.txt -Recurse | Select-String -Pattern "TEST SUCCESS" ).Count -eq 0) {
            Get-Content -Path build\*\test-results\*\*\newfailures.txt ;
            exit 1
          }

      - name: Create suitable test log artifact name
        if: always()
        run: echo ("logsuffix=" + ("${{ matrix.test }}" -replace "/", "_" -replace " ", "_")) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Package test results
        if: always()
        working-directory: build/run-test-prebuilt/test-results/
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ;
          zip -r9
          "$HOME/windows-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip"
          .
        continue-on-error: true

      - name: Package test support
        if: always()
        working-directory: build/run-test-prebuilt/test-support/
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ;
          zip -r9
          "$HOME/windows-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip"
          .
          -i *.jtr
          -i */hs_err*.log
          -i */replay*.log
        continue-on-error: true

      - name: Persist test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: ~/windows-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip
        continue-on-error: true

      - name: Persist test outputs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: ~/windows-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip
        continue-on-error: true

  macos_x64_build:
    name: macOS x64
    runs-on: "macos-11"
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_x64 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build release
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}"

    steps:
      - name: Checkout the source
        uses: actions/checkout@v2
        with:
          path: jdk

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true
          wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
          echo "${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | shasum -a 256 -c >/dev/null -
          tar -xf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Fix jtreg permissions
        run: chmod -R a+rx ${HOME}/jtreg/

      - name: Install dependencies
        run: brew install make

      - name: Select Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer

      - name: Configure
        run: >
          bash configure
          --with-conf-name=macos-x64
          ${{ matrix.flags }}
          --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-build-number=b00
          --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/Contents/Home
          --with-jtreg=${HOME}/jtreg
          --with-zlib=system
        working-directory: jdk

      - name: Build
        run: make CONF_NAME=macos-x64 images
        working-directory: jdk

      - name: Persist test bundles
        uses: actions/upload-artifact@v2
        with:
          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk/build/macos-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}.tar.gz
            jdk/build/macos-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}.tar.gz

  macos_x64_test:
    name: macOS x64
    runs-on: "macos-11"
    if: false
    needs:
      - prerequisites
      - macos_x64_build

    strategy:
      fail-fast: false
      matrix:
        test:
          - jdk/tier1 part 1
          - jdk/tier1 part 2
          - jdk/tier1 part 3
          - langtools/tier1
          - hs/tier1 common
          - hs/tier1 compiler
          - hs/tier1 gc
          - hs/tier1 runtime
          - hs/tier1 serviceability
        include:
          - test: jdk/tier1 part 1
            suites: test/jdk/:tier1_part1
          - test: jdk/tier1 part 2
            suites: test/jdk/:tier1_part2
          - test: jdk/tier1 part 3
            suites: test/jdk/:tier1_part3
          - test: langtools/tier1
            suites: test/langtools/:tier1
          - test: hs/tier1 common
            suites: test/hotspot/jtreg/:tier1_common
            artifact: -debug
          - test: hs/tier1 compiler
            suites: test/hotspot/jtreg/:tier1_compiler
            artifact: -debug
          - test: hs/tier1 gc
            suites: test/hotspot/jtreg/:tier1_gc
            artifact: -debug
          - test: hs/tier1 runtime
            suites: test/hotspot/jtreg/:tier1_runtime
            artifact: -debug
          - test: hs/tier1 serviceability
            suites: test/hotspot/jtreg/:tier1_serviceability
            artifact: -debug

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}"

    steps:
      - name: Checkout the source
        uses: actions/checkout@v2

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true
          wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
          echo "${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | shasum -a 256 -c >/dev/null -
          tar -xf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Restore build artifacts
        id: build_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-macos-x64${{ matrix.artifact }}
        continue-on-error: true

      - name: Restore build artifacts (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-macos-x64${{ matrix.artifact }}
        if: steps.build_restore.outcome == 'failure'

      - name: Unpack jdk
        run: |
          mkdir -p "${HOME}/jdk-macos-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}"
          tar -xf "${HOME}/jdk-macos-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}.tar.gz" -C "${HOME}/jdk-macos-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact }}"

      - name: Unpack tests
        run: |
          mkdir -p "${HOME}/jdk-macos-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}"
          tar -xf "${HOME}/jdk-macos-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}.tar.gz" -C "${HOME}/jdk-macos-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin-tests${{ matrix.artifact }}"

      - name: Install dependencies
        run: brew install make

      - name: Select Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer

      - name: Find root of jdk image dir
>>>>>>> dragonwell_extended_upstream/master
        run: |
          jtreg -agentvm -a -ea -esa -v:fail,error,time,nopass -jdk:/opt/dragonwell8 -exclude:"/__w/dragonwell8/dragonwell8/hotspot/test/ProblemList.txt" -exclude:"/__w/dragonwell8/dragonwell8/jdk/test/ProblemList.txt" "${{ matrix.test }}"
      - name: Check that all tests executed successfully
        run: >
          if [[ egrep -q "(failed|error)" /__w/dragonwell8/dragonwell8/JTreport/text/stats.txt ]]; then
            cat /__w/dragonwell8/dragonwell8/JTreport/newfailures.txt /__w/dragonwell8/dragonwell8/JTreport/other_errors.txt;
            exit 1 ;
          fi
