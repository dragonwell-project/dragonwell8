/*
 * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

public class MissingSafepointOnTryCatch version 52:0 {

    static Method m:"()V" {
        return;
    }

    static Method test1:"()V" stack 1 {
        try t;
            invokestatic m:"()V";
            return;

            catch t java/lang/Throwable;
            stack_map class java/lang/Throwable;
            athrow;
        endtry t;
    }

    static Method test2:"()V" stack 1 {
        try t0;
            try t1;
                invokestatic m:"()V";
            endtry t1;
            return;

            catch t1 java/lang/Exception;
            stack_map class java/lang/Exception;
            return;

            catch t0 java/lang/Throwable;
            stack_map class java/lang/Throwable;
            athrow;
        endtry t0;
    }

    public static Method th:"()V"
      throws java/lang/Exception
      stack 2 locals 0
    {
          new	class java/lang/Exception;
          dup;
          invokespecial	Method java/lang/Exception."<init>":"()V";
          athrow;
    }

    static Method test3:"()V" stack 1 locals 2 {
        try t;
            invokestatic m:"()V";
            iconst_1;
            istore_0;
    		iconst_0;
    		istore_1;
            return;
            catch t java/lang/Throwable;
            stack_map class java/lang/Throwable;
            invokestatic th:"()V";
            return;
        endtry t;
    }

    static Method test4:"()V" stack 2 locals 2 {
        try t;
            invokestatic m:"()V";
            iconst_1;
            istore_0;
            iconst_0;
            istore_1;
            return;
            catch t java/lang/Throwable;
            stack_map class java/lang/Throwable;
            iconst_1;
            istore_0;
            invokestatic th:"()V";
            return;
        endtry t;
    }

    static Method testInfinite:"()V" stack 1 {
        try t;
            invokestatic th:"()V";
            return;

            catch t java/lang/Throwable;
            stack_map class java/lang/Throwable;
            athrow;
        endtry t;
    }

} // end Class MissingSafepointOnTryCatch
