#
# Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

error.cant.open=\
     can''t open: {0} 
error.illegal.option=\
        Illegal option: {0}
error.bad.option=\
        One of options -{ctxu} must be specified.
error.bad.cflag=\
        'c' flag requires manifest or input files to be specified!
error.bad.uflag=\
        'u' flag requires manifest, 'e' flag or input files to be specified!
error.bad.eflag=\
	'e' flag and manifest with the 'Main-Class' attribute cannot be specified \n\
	 together!
error.nosuch.fileordir=\
        {0} : no such file or directory
error.write.file=\
        Error in writing existing jar file
error.create.dir=\
        {0} : could not create directory
error.incorrect.length=\
        incorrect length while processing: {0}
error.create.tempfile=\
        Could not create a temporary file
warn.option.is.ignored=\
        Warning: The {0} option is not valid with current usage, will be ignored.
out.added.manifest=\
        added manifest
out.update.manifest=\
        updated manifest
out.ignore.entry=\
        ignoring entry {0}
out.adding=\
        adding: {0}
out.deflated=\
        (deflated {0}%)
out.stored=\
        (stored 0%)
out.create=\
        \ \ created: {0}
out.extracted=\
        extracted: {0}
out.kept=\
        \ \ skipped: {0} exists
out.inflated=\
        \ inflated: {0}
out.size=\
        (in = {0}) (out= {1})

usage=\
Usage: jar {ctxui}[vfmn0PMek] [jar-file] [manifest-file] [entry-point] [-C dir] files ...\n\
Options:\n\
\ \   -c  create new archive\n\
\ \   -t  list table of contents for archive\n\
\ \   -x, Extract named (or all) files from the archive.\n\
\ \       If a file with the same name appears more than once in\n\
\ \       the archive, each copy will be extracted, with later copies\n\
\ \       overwriting (replacing) earlier copies unless 'k' is specified.\n\
\ \   -u  update existing archive\n\
\ \   -v  generate verbose output on standard output\n\
\ \   -f  specify archive file name\n\
\ \   -m  include manifest information from specified manifest file\n\
\ \   -n  perform Pack200 normalization after creating a new archive\n\
\ \   -e  specify application entry point for stand-alone application \n\
\ \       bundled into an executable jar file\n\
\ \   -0  store only; use no ZIP compression\n\
\ \   -P  preserve leading '/' (absolute path) and ".." (parent directory) components from file names\n\
\ \   -M  do not create a manifest file for the entries\n\
\ \   -i  generate index information for the specified jar files\n\
\ \   -C  change to the specified directory and include the following file\n\
Operation modifiers valid only in extract mode:\n\
\ \   -k  Do not overwrite existing files.\n\
\ \       If a Jar file entry with the same name exists in the target\n\
\ \       directory, the existing file will not be overwritten.\n\
\ \       As a result, if a file appears more than once in an\n\
\ \       archive, later copies will not overwrite earlier copies.\n\
\ \       Also note that some file system can be case insensitive.\n\
If any file is a directory then it is processed recursively.\n\
The manifest file name, the archive file name and the entry point name are\n\
specified in the same order as the 'm', 'f' and 'e' flags.\n\n\
Example 1: to archive two class files into an archive called classes.jar: \n\
\ \      jar cvf classes.jar Foo.class Bar.class \n\
Example 2: use an existing manifest file 'mymanifest' and archive all the\n\
\ \          files in the foo/ directory into 'classes.jar': \n\
\ \      jar cvfm classes.jar mymanifest -C foo/ .\n
